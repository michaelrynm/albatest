openapi: 3.1.0
info:
  title: Blog API
  version: "1.0.0"
  description: |
    REST API untuk autentikasi, user profile, kategori, post dengan cover (Spatie Media Library),
    dan bookmark. Proteksi token menggunakan Laravel Sanctum (Bearer).
    - Semua list mendukung pagination (?page=, ?per_page=).
    - Soft delete aktif pada Categories, Posts, dan pivot Bookmarks.
servers:
  - url: http://localhost:8000/api
security:
  - bearerAuth: []
paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register user baru
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
            examples:
              default:
                value: { name: "Alice", email: "alice@mail.com", password: "secret123", password_confirmation: "secret123" }
      responses:
        "201":
          description: Berhasil register
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/User' }
                  token:
                    type: string
                    description: Sanctum bearer token
        "422": { $ref: '#/components/responses/UnprocessableEntity' }

  /auth/login:
    post:
      tags: [Auth]
      summary: Login dan dapatkan token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
            examples:
              default:
                value: { email: "alice@mail.com", password: "secret123" }
      responses:
        "200":
          description: Berhasil login
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/User' }
                  token:
                    type: string
        "422":
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorMessage' }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout (revoke token aktif)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logged out
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        "401": { $ref: '#/components/responses/Unauthorized' }

  /users/me:
    get:
      tags: [User]
      summary: Ambil profil user yang sedang login
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "401": { $ref: '#/components/responses/Unauthorized' }
    put:
      tags: [User]
      summary: Update profil (name, bio)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateProfileRequest' }
            examples:
              default:
                value: { name: "Alice Doe", bio: "Tech writer & maker." }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "422": { $ref: '#/components/responses/UnprocessableEntity' }

  /categories:
    get:
      tags: [Category]
      summary: List categories (pagination)
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        "200":
          description: OK (paginated)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedCategories' }
    post:
      tags: [Category]
      summary: Buat kategori baru
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryStore' }
            examples:
              default:
                value: { name: "Tech", slug: "tech" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
        "422": { $ref: '#/components/responses/UnprocessableEntity' }

  /categories/{id}:
    get:
      tags: [Category]
      summary: Detail kategori
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
        "404": { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Category]
      summary: Update kategori
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryUpdate' }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
        "422": { $ref: '#/components/responses/UnprocessableEntity' }
        "404": { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [Category]
      summary: Hapus kategori (soft delete)
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        "404": { $ref: '#/components/responses/NotFound' }

  /posts:
    get:
      tags: [Post]
      summary: List posts (pagination + filter)
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - in: query
          name: search
          schema: { type: string }
          description: Cari di title & content
        - in: query
          name: category_id
          schema: { type: integer }
          description: Filter berdasarkan category id
      responses:
        "200":
          description: OK (paginated)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedPosts' }
    post:
      tags: [Post]
      summary: Buat post baru (dengan cover image)
      description: Kirim sebagai multipart/form-data jika menyertakan file cover.
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: '#/components/schemas/PostStoreMultipart' }
          application/json:
            schema: { $ref: '#/components/schemas/PostStore' }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Post' }
        "422": { $ref: '#/components/responses/UnprocessableEntity' }

  /posts/{id}:
    get:
      tags: [Post]
      summary: Detail post
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Post' }
        "404": { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Post]
      summary: Update post (hanya author)
      description: multipart/form-data jika update cover.
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: '#/components/schemas/PostUpdateMultipart' }
          application/json:
            schema: { $ref: '#/components/schemas/PostUpdate' }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Post' }
        "403": { $ref: '#/components/responses/Forbidden' }
        "404": { $ref: '#/components/responses/NotFound' }
        "422": { $ref: '#/components/responses/UnprocessableEntity' }
    delete:
      tags: [Post]
      summary: Hapus post (soft delete, hanya author)
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        "403": { $ref: '#/components/responses/Forbidden' }
        "404": { $ref: '#/components/responses/NotFound' }

  /bookmarks:
    get:
      tags: [Bookmark]
      summary: List post yang di-bookmark user (pagination)
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        "200":
          description: OK (paginated)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedPosts' }
        "401": { $ref: '#/components/responses/Unauthorized' }

  /posts/{id}/bookmark:
    post:
      tags: [Bookmark]
      summary: Toggle bookmark/unbookmark
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Status terbaru bookmark
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BookmarkToggleResponse' }
        "404": { $ref: '#/components/responses/NotFound' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Sanctum

  parameters:
    id:
      in: path
      name: id
      required: true
      schema: { type: integer }
    page:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
    per_page:
      in: query
      name: per_page
      schema: { type: integer, minimum: 1, maximum: 100, default: 10 }

  responses:
    Unauthorized:
      description: Unauthorized (token invalid/absen)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorMessage' }
    Forbidden:
      description: Forbidden (tidak punya akses)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorMessage' }
    NotFound:
      description: Resource tidak ditemukan
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorMessage' }
    UnprocessableEntity:
      description: Validasi gagal
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ValidationError' }

  schemas:
    Message:
      type: object
      properties:
        message: { type: string }

    ErrorMessage:
      type: object
      properties:
        message: { type: string }

    ValidationError:
      type: object
      properties:
        message: { type: string, example: "The given data was invalid." }
        errors:
          type: object
          additionalProperties:
            type: array
            items: { type: string }
      example:
        message: "The given data was invalid."
        errors:
          email: ["The email has already been taken."]

    # ===== User =====
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: [string, 'null'] }
        email: { type: string, format: email }
        bio: { type: [string, 'null'] }
        created_at: { type: string, format: date-time }

    UpdateProfileRequest:
      type: object
      properties:
        name: { type: string, nullable: true, maxLength: 100 }
        bio: { type: string, nullable: true }

    RegisterRequest:
      type: object
      required: [email, password, password_confirmation]
      properties:
        name: { type: string, nullable: true, maxLength: 100 }
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
        password_confirmation: { type: string, minLength: 8 }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }

    # ===== Category =====
    Category:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        slug: { type: string }
        created_at: { type: string, format: date-time }

    CategoryStore:
      type: object
      required: [name, slug]
      properties:
        name: { type: string, maxLength: 120 }
        slug: { type: string, maxLength: 150 }

    CategoryUpdate:
      type: object
      properties:
        name: { type: string, maxLength: 120 }
        slug: { type: string, maxLength: 150 }

    PaginatedCategories:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Category' }
        links:
          type: object
          properties:
            first: { type: string, nullable: true }
            last:  { type: string, nullable: true }
            prev:  { type: string, nullable: true }
            next:  { type: string, nullable: true }
        meta:
          type: object
          properties:
            current_page: { type: integer }
            from: { type: integer, nullable: true }
            last_page: { type: integer }
            path: { type: string }
            per_page: { type: integer }
            to: { type: integer, nullable: true }
            total: { type: integer }

    # ===== Post =====
    Post:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        content: { type: string }
        cover_url: { type: [string, 'null'], format: uri }
        category: { $ref: '#/components/schemas/Category' }
        author: { $ref: '#/components/schemas/User' }
        created_at: { type: string, format: date-time }

    PostStore:
      type: object
      required: [title, content, category_id]
      properties:
        title: { type: string, maxLength: 200 }
        content: { type: string }
        category_id: { type: integer }
        # cover dikirim terpisah bila JSON

    PostStoreMultipart:
      type: object
      required: [title, content, category_id]
      properties:
        title: { type: string }
        content: { type: string }
        category_id:
          type: string
          description: Kirim sebagai string pada multipart form
        cover:
          type: string
          format: binary
          description: Gambar cover (max 2MB)

    PostUpdate:
      type: object
      properties:
        title: { type: string, maxLength: 200 }
        content: { type: string }
        category_id: { type: integer }

    PostUpdateMultipart:
      type: object
      properties:
        title: { type: string }
        content: { type: string }
        category_id:
          type: string
        cover:
          type: string
          format: binary

    PaginatedPosts:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Post' }
        links:
          type: object
          properties:
            first: { type: string, nullable: true }
            last:  { type: string, nullable: true }
            prev:  { type: string, nullable: true }
            next:  { type: string, nullable: true }
        meta:
          type: object
          properties:
            current_page: { type: integer }
            from: { type: integer, nullable: true }
            last_page: { type: integer }
            path: { type: string }
            per_page: { type: integer }
            to: { type: integer, nullable: true }
            total: { type: integer }

    # ===== Bookmark =====
    BookmarkToggleResponse:
      type: object
      properties:
        status:
          type: string
          enum: [bookmarked, unbookmarked]
